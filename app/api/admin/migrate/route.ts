import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import fs from 'fs';
import path from 'path';

// Í∞úÎ≥Ñ ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ìï®ÏàòÎì§
async function createUserWarningsTable() {
  const query = `
    CREATE TABLE IF NOT EXISTS user_warnings (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID REFERENCES users(id) ON DELETE CASCADE,
      warning_type VARCHAR(50) NOT NULL,
      warning_message TEXT NOT NULL,
      content TEXT NOT NULL,
      issued_at TIMESTAMPTZ DEFAULT NOW(),
      issued_by UUID REFERENCES users(id)
    );
  `;
  
  const { error } = await supabase.rpc('exec_sql', { sql: query });
  return { name: 'user_warnings', error };
}

async function createChatMessagesTable() {
  const query = `
    CREATE TABLE IF NOT EXISTS chat_messages (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID REFERENCES users(id) ON DELETE CASCADE,
      username VARCHAR(50) NOT NULL,
      message TEXT NOT NULL CHECK (char_length(message) <= 200),
      is_filtered BOOLEAN DEFAULT false,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `;
  
  const { error } = await supabase.rpc('exec_sql', { sql: query });
  return { name: 'chat_messages', error };
}

async function createContentFiltersTable() {
  const query = `
    CREATE TABLE IF NOT EXISTS content_filters (
      id SERIAL PRIMARY KEY,
      filter_type VARCHAR(50) NOT NULL,
      word_pattern VARCHAR(255) NOT NULL,
      severity INTEGER DEFAULT 1 CHECK (severity >= 1 AND severity <= 3),
      replacement VARCHAR(50) DEFAULT '***',
      is_active BOOLEAN DEFAULT true,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `;
  
  const { error } = await supabase.rpc('exec_sql', { sql: query });
  return { name: 'content_filters', error };
}

export async function GET(request: NextRequest) {
  // Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
  const cookie = request.headers.get('cookie');
  if (!cookie?.includes('kid-battle-session')) {
    return NextResponse.json(
      { error: 'Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.' },
      { status: 401 }
    );
  }

  console.log('üöÄ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏãúÏûë...');
  
  const results = {
    success: [],
    failed: [],
    checks: []
  };

  // 1. ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
  const tablesToCheck = ['user_warnings', 'chat_messages', 'content_filters'];
  
  for (const table of tablesToCheck) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);
      
      if (!error) {
        results.checks.push(`‚úÖ ${table} ÌÖåÏù¥Î∏îÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.`);
      } else {
        results.checks.push(`‚ùå ${table} ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏäµÎãàÎã§. ÏÉùÏÑ±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.`);
      }
    } catch (err) {
      results.checks.push(`‚ùå ${table} ÌÖåÏù¥Î∏î ÌôïÏù∏ Ïã§Ìå®`);
    }
  }

  // 2. users ÌÖåÏù¥Î∏î ÌïÑÎìú ÌôïÏù∏
  try {
    const { data, error } = await supabase
      .from('users')
      .select('warnings_count, account_suspended, auto_login_token')
      .limit(1);
    
    if (!error) {
      results.checks.push('‚úÖ users ÌÖåÏù¥Î∏îÏùò ÏÉà ÌïÑÎìúÎì§Ïù¥ Ïù¥ÎØ∏ Ï∂îÍ∞ÄÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
    } else {
      results.checks.push('‚ùå users ÌÖåÏù¥Î∏îÏóê ÏÉà ÌïÑÎìú Ï∂îÍ∞ÄÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
    }
  } catch (err) {
    results.checks.push('‚ùå users ÌÖåÏù¥Î∏î ÌïÑÎìú ÌôïÏù∏ Ïã§Ìå®');
  }

  // 3. Í∏∞Î≥∏ ÌïÑÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏãúÎèÑ
  try {
    const filters = [
      { filter_type: 'profanity', word_pattern: '(Î∞îÎ≥¥|Î©çÏ≤≠Ïù¥|Îò•|Ï∞åÏßàÏù¥)', severity: 1, replacement: '***' },
      { filter_type: 'profanity', word_pattern: '(ÏãúÎ∞ú|Ïî®Î∞ú|Í∞úÏÉàÎÅº|ÎØ∏Ïπú|Ï£ΩÏñ¥)', severity: 2, replacement: '***' },
      { filter_type: 'ten_commandments', word_pattern: '(ÌïòÎÇòÎãò|ÌïòÎäêÎãò|ÏòàÏàò|Í∑∏Î¶¨Ïä§ÎèÑ).*?(Ïöï|ÎÇòÏÅú|Ïã´|Ï¶ùÏò§)', severity: 2, replacement: '***' },
      { filter_type: 'ten_commandments', word_pattern: '(Î∂ÄÎ™®|ÏóÑÎßà|ÏïÑÎπ†).*?(Ïã´|ÎØ∏Ïõå|ÎÇòÎπ†|Ï£Ω)', severity: 2, replacement: '***' },
      { filter_type: 'inappropriate', word_pattern: '(Îã¥Î∞∞|Ïà†|ÎßàÏïΩ|ÎèÑÎ∞ï)', severity: 2, replacement: '***' }
    ];

    const { error } = await supabase
      .from('content_filters')
      .insert(filters);
    
    if (!error) {
      results.success.push('‚úÖ Í∏∞Î≥∏ ÌïÑÌÑ∞ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä ÏôÑÎ£å');
    }
  } catch (err) {
    // Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï† Ïàò ÏûàÏúºÎØÄÎ°ú Ïò§Î•ò Î¨¥Ïãú
  }

  return NextResponse.json({
    message: 'ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å',
    results,
    nextSteps: [
      '1. Supabase ÎåÄÏãúÎ≥¥Îìú (https://app.supabase.com) Ï†ëÏÜç',
      '2. SQL Editor Ïó¥Í∏∞',
      '3. database/update-schema.sql ÌååÏùº ÎÇ¥Ïö© Î≥µÏÇ¨',
      '4. SQL EditorÏóê Î∂ôÏó¨ÎÑ£Í≥† Ïã§Ìñâ',
      '5. ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌôïÏù∏'
    ]
  });
}